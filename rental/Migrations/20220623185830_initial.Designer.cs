// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using rental.Entities;

namespace rental.Migrations
{
    [DbContext(typeof(RentalDbContext))]
    [Migration("20220623185830_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("rental.Entities.Brand", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Name");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("rental.Entities.Car", b =>
                {
                    b.Property<string>("LicensePlate")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("AirConditioning")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("BrandName")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Color")
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("CostPerDay")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Fuel")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<double>("FuelUsage")
                        .HasColumnType("double");

                    b.Property<string>("Gearbox")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("ModelName")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<short>("YearOfProduction")
                        .HasColumnType("smallint");

                    b.HasKey("LicensePlate");

                    b.HasIndex("BrandName");

                    b.HasIndex("ModelName");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("rental.Entities.Model", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)");

                    b.Property<byte>("NumberOfSeats")
                        .HasColumnType("tinyint");

                    b.Property<string>("Photo")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Name");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("rental.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CarLicensePlate")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<bool>("UpToDate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserLogin")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CarLicensePlate");

                    b.HasIndex("UserLogin");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("rental.Entities.User", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Login");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("rental.Entities.Car", b =>
                {
                    b.HasOne("rental.Entities.Brand", "Brand")
                        .WithMany("Cars")
                        .HasForeignKey("BrandName");

                    b.HasOne("rental.Entities.Model", "Model")
                        .WithMany("Cars")
                        .HasForeignKey("ModelName");

                    b.Navigation("Brand");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("rental.Entities.Reservation", b =>
                {
                    b.HasOne("rental.Entities.Car", "Car")
                        .WithMany("Reservations")
                        .HasForeignKey("CarLicensePlate");

                    b.HasOne("rental.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserLogin");

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rental.Entities.Brand", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("rental.Entities.Car", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("rental.Entities.Model", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("rental.Entities.User", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
